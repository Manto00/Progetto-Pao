design pattern:
observer
model view control

requisiti:
inserire modificare salvare ed eliminare dati
mostrare i dati come grafici

abstract:
ristorante->gestione
ore più fruttuose, con più clienti, gestione del personale ad ora, numero di consegne ad asporto, ritrado consenge  per ore.
piatti più venduti, dessert primi secondi ecc... / idem per le bevande
classi-> cibi menù (con gerarchie e classe astratta).

Sarebbe carino prendere i dati da un excel magari, oppure da un xml. Vedere il progetto su mega

Grafici:
Uno per i lavoratori -> pagamenti/presenze (istogramma bar)
				formazione titolo di studio ecc...

risorse-> prezzi e rifornimento

Per i guadagni-> in prospetto temporale-> ora e giorno medi (istogramma bar)
		  -> in prospetto temporale-> ora e giorno totali, in stile stock market (istogramma ?a linea unica?)

Analisi delle scelte dei consumatori
-> permanenza al tavolo (più adatto ad un ristorante non ad un fast food, per sapere a che ora se ne vanno i customer) e ore di punta (istogramma)
-> piatti più venduti (pie chart)
-> bevande più vendute (pie chart)
-> drive vs tavolo (ipotesi del fast food/altrimenti implementabile con il delivery)-> con prospetto temporale-> ora e giorno

altri grafici: dot, istogramma stock market comparato-> con due linee o più



criticità attuali:
incapsulametno, modularità,estensibilità, polimorfismo ecc...-> definizione esatta
gerarchia poco entusiasmante
polimorfismo poco utilizzato, se non...

about polimorfismo->utilizare una classe astratta senza sapere la sua implementazione->devo avere dei metodi generali che non usano rtti SOLID principles, la o in particolare

________________________________________________________________________________________________________________________________________

APPROCCIO STATICO
Schermata iniziale:
-Modifica dei dati
	-manuale: aggiunta di un ordine/di un impegato (anche modifica e rimozione).
	-tramite file: cambia il path del file di lettura e legge un nuovo file
-Visualizzazione dati
	-schermata divisa in sezioni, una per ogni grafico->sono dei push button che poratano al grafico effettivo fullscreen (macroaree?)
		-piatti più venduti
		-bevande più vendute
		-asporto vs tavoli
		-permanenza al tavolo
		-i tuoi guadagni
		-pagamento del personale
		-formazione del personale
		-magazino

OPPURE

APPROCCIO DINAMICO (verificare se possibile)
Schermata iniziale:
-Schermata divisa in sezioni, una per ogni grafico->sono dei push button che poratano al grafico effettivo fullscreen (macroaree?)
	-piatti più venduti		+visualizzazione modifica aggiunta e rimozione dei dati in tempo reale nella stessa schermata
	-bevande più vendute		+visualizzazione modifica aggiunta e rimozione dei dati in tempo reale nella stessa schermata
	-asporto vs tavoli		+visualizzazione dei dati in tempo reale nella stessa schermata/filtro temporale
	-permanenza al tavolo		+visualizzazione dei dati in tempo reale nella stessa schermata/filtro temporale
	-i tuoi guadagni			+visualizzazione dei dati in tempo reale nella stessa schermata/filtro temporale
	-pagamento del personale	+visualizzazione modifica aggiunta e rimozione dei dati in tempo reale nella stessa schermata/(budget)
	-formazione del personale	+visualizzazione modifica aggiunta e rimozione dei dati in tempo reale nella stessa schermata/RisUmane
	-magazino				+visualizzazione modifica aggiunta e rimozione dei dati in tempo reale nella stessa schermata/Soglie 							 di magazino minimo

Note:
Fare un grafico integrato per tutti i grafici che concorrono nei costi/guadagni -> quando si apre uno dei gradici individuali si può mettere a side quello comprensivo (grafico a torta con costi personale/costi magazino/guadagni-> non funzionerebbe molto bene actually un grafico torta per comparare costi e ricavi).


Gerarchia di tipi:
-elemento menù (astratta)-> cibo/bevande
	get prezzo()

-orario/data

-ordine 
	orario/data entrata
	orario/data uscita
	elemento menù
	if(entrata==uscita) {asporto} //non molto giusto a livello logico, sarebbe ideale avere gerarchia di classi, ma a quel punto serve fare anche rtti

-dipendente
	enum titolo di studi
	stipendio
	enum ruolo
	
-elemento_magazino
	scorta_minima

+vector ordine
+vector elemento_magazino
+vector dipendente